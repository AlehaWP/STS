// *****************************************************************************
// Название: Ув.ДТ->XML
// Описание: Повторная выгрузка уведомления о выдачи с СВХ во внешнюю систему
// Кнопка вызова: 1
// Подпись кнопки: Ув.ДТ->XML
// Язык: FuncScript
// Вызов по событию: 
// Без подтверждения: 0
// *****************************************************************************
//
FUNC ('SaveObject',
  Block(
    PARAM ('pBackupFile', String, 0);
    // В xml-файле с отказом в регистрации ДО-1/Доб листа к ДО-1/ДО-2 нет признака на какой тип документа это отказ
    // Поэтому принудительно дописываем в аттрибуты основного элемента признак "DocType" (0: не добавляем аттрибут, 1: ДО-1, 2: Доб лист к ДО-1, 3: ДО-2)
    PARAM ('pDocType', Integer, 1);
    PARAM ('pSaveDirectory', String, 2);
  ),
  Block(
    IF (FILEEXISTS(pBackupFile),
       Block(
         VAR ('XmlDoc', Integer);
         VAR ('XmlObject', Integer);
         VAR ('XmlDORegInfo', Integer);
         VAR ('sXmlFileToSave', String, '');
         XMLDoc := XMLDOCUMENTCREATE();
         XMLDOCUMENTLOAD (XMLDoc, pBackupFile);
         XmlObject := XMLNODEFIND (XMLNODEFIND (XMLNODEFIND (XMLNODECHILD (XMLDOCUMENTROOT (XmlDoc), 0), 'Body'), 'Signature'), 'Object');
         XMLDORegInfo := XMLNODECHILD (XmlObject, 0);
         VAR ('DoType', String,       XMLNODEVALUE (XMLNODECHILD (XMLNODECHILD (XMLDORegInfo, 'whgou:ProduceDocuments') , 'cat_ru:PrDocumentName')));
         VAR ('DoNo', String,         XMLNODEVALUE (XMLNODECHILD (XMLNODECHILD (XMLDORegInfo, 'whgou:ProduceDocuments') , 'cat_ru:PrDocumentNumber')));
         VAR ('DoDate', String,       XMLNODEVALUE (XMLNODECHILD (XMLNODECHILD (XMLDORegInfo, 'whgou:ProduceDocuments') , 'cat_ru:PrDocumentDate')));
         XMLNODESETATTRIBUTE (XMLDORegInfo, 'dodt', FormatDateTime('DD.MM.YYYY HH:MM:SS', Date () + Time (1)));
         XMLNODESETATTRIBUTE (XMLDORegInfo, 'issuedocname', DoType);
         XMLNODESETATTRIBUTE (XMLDORegInfo, 'issuedocnumber', DoNo);
         XMLNODESETATTRIBUTE (XMLDORegInfo, 'issuedocdate', DoDate);


         sXmlFileToSave := IncludeTrailingBackslash (pSaveDirectory) + EXTRACTSTR (pBackupFile, SPLITSTR (pBackupFile, '\', sSQL), '\');
         XMLNODESAVE (XMLDORegInfo, sXmlFileToSave);
       ),
    ); // IF - //
  )
), // FUNC - //

VAR ('sOutDirectory', string, 'Z:\STMxml\EXPDT\');
IF (DIRECTORYEXISTS (sOutDirectory) = 0,
 Block(
   FORCEDIRECTORIES (sOutDirectory);
 ),
);

OPENQUERY('GET_UV','SELECT JOURNAL_MASTER_ID as JMID, PrDocumentNumber, prDocumentDate, PrDocumentName, DocumentID FROM jrGoodOut2 '+
                  ' WHERE prDocumentDate>='+char(39)+FDT('DD.MM.YYYY',DATE()-7)+char(39)+
                  ' AND DOCUMENTKIND = '+char(39)+'GoodOutDecision'+char(39)+
                  ' ORDER BY prDocumentDate, PrDocumentNumber',
                  'dbJournals', 0);
IF(SELECTRECORDS ('Укажите ДТ для привязки к ДО1', 'GET_UV',
                [
                  ['PrDocumentNumber', 'Номер ДТ', 30],
                  ['PrDocumentDate', 'Дата ДТ', 15]
                ],
                'SELECTED_UV', , 'STS_DB'
   ),, RAISEEXCEPTION ('Выполнение отменено'));

VAR ('sDocID', string, SELECTED_UV.DocumentID );
CLOSEDATASET('GET_UV');
CLOSEDATASET('SELECTED_UV');


VAR ('sSTSAlbum', String, INIFILE ('XMLFormat', 'Version', '5.12.0'));
VAR ('sSQL', String, '');
VAR ('sFileFromBase', String, '');
VAR ('sTempFile', String, '');

IF (FILEEXISTS (INCLUDETRAILINGBACKSLASH (PROGRAMPATH ()) + 'ProcDocs\open_monitor_db.prd') = 1,
  Block(
    EXECUTESCRIPT (INCLUDETRAILINGBACKSLASH (PROGRAMPATH ()) + 'ProcDocs\open_monitor_db.prd');
  ),
  Block(
    RAISEEXCEPTION ('Не найден скрипт "open_monitor_db.prd"');
  )
);

TRYFINALLY (
  Block(
    SHOWINFORMATION ('Выполняется поиск уведомлений, подождите..');
    sSQL := '';
    sFileFromBase := '';
    sTempFile := '';

    sSQL := sSQL + 'SELECT BackupFile, INCOMING FROM ED_ProcMessages WHERE MsgId='+ CHAR(39) +'CMN.13014'+ CHAR(39)+ ' AND WHDocId='+ CHAR(39) +sDocID+ CHAR(39);

    OPENQUERY ('Q_FILE', sSQL, 'dbMonitor');
    FIRST ('Q_FILE');
    {WHILE ( EOF ('Q_FILE') = 0,
          BLOCK (
                 sFileFromBase := Trim(Q_FILE.BackupFile);
                 IF (FILEEXISTS(sFileFromBase),
                     BLOCK (
                           sTempFile := INCLUDETRAILINGBACKSLASH(TEMPDIRECTORY())+ GENERATEUUID ()+'.xml';

                           COPYFILE(sFileFromBase, sTempFile);
                           SaveObject( sTempFile,0, sOutDirectory);
                           DELETEFILE( sTempFile );
                     ),
                 );//if
                 NEXT ('Q_FILE')
         )//block
    );//while
    }
    WHILE ( EOF ('Q_FILE') = 0,
      Block (
        // подключение функции GetBackupFile
        EXECUTESCRIPT (INCLUDETRAILINGBACKSLASH (PROGRAMPATH ()) + 'ProcDocs\utils\get_backup_file.prd');
        sFileFromBase := GetBackupFile (Q_FILE.BACKUPFILE, Q_FILE.INCOMING);
        IF (FILEEXISTS (sFileFromBase),
          Block (
            sTempFile := INCLUDETRAILINGBACKSLASH (TEMPDIRECTORY ())+ GENERATEUUID ()+'.xml';
            //showmessage(sTempFile);
            COPYFILE (sFileFromBase, sTempFile);
            SaveObject (sTempFile, 0, sOutDirectory);
            DELETEFILE (sTempFile);
          ),
        ); // IF
        NEXT ('Q_FILE')
      )
    ); // WHILE
    // ПОДКЛИЧЕНИЕ К БАЗЕ МОНИТОР ЭД (КОНЕЦ)
  ),
  Block(
    HIDEINFORMATION ();
    CLOSEDATABASE ('dbMonitor');
  )
); // TRYFINALLY - //
