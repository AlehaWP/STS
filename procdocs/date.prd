// *****************************************************************************
// Ќазвание: ‘ункции работы с датами
// ќписание: 
//  нопка вызова: 0
// ѕодпись кнопки: 
// язык: FuncScript
// *****************************************************************************
//

// определение високосности года
Func('isLeapYear', 
  Param('iYear', Integer, 0),
Block(
  (MOD(iYear, 4) = 0) * ((MOD(iYear, 400) = 0) | (MOD(iYear, 100) <> 0))
));

// определение количества дней в мес€це года
Func('DaysInMonth', Block( 
  Param('sYear', String, 0),
  Param('sMonth', String, 1)
),
Block(
  Var('iYear', Integer, CONVERT (sYear, Integer));
  Var('iMonth', Integer, CONVERT (sMonth, Integer));
  CASE (iMonth,
    [1, 31,
     2, IF(isLeapYear(iYear), 29, 28),
     3, 31,
     4, 30,
     5, 31,
     6, 30,
     7, 31,
     8, 31,
     9, 30,
     10, 31,
     11, 30,
     12, 31],
    30)
));

// определение количества дней в мес€це года по дате
Func('DaysinMonthByDate',  
  Param('dtDate', DateTime, 0),
Block(
  DaysInMonth(FORMATDATETIME ('YYYY', dtDate), FORMATDATETIME ('MM', dtDate))
));

// добавление мес€цев к дате
Func('AddMonths', Block(  
  Param('dtDate', DateTime, 0),
  Param('fMonths', Float, 1)
), Block(
  Var('dtResult', DateTime);

  Var('iYear', Integer, CONVERT(FORMATDATETIME ('YYYY', dtDate), Integer));
  Var('iMonth', Integer, CONVERT(FORMATDATETIME ('MM', dtDate), Integer));
  Var('iDay', Integer, CONVERT(FORMATDATETIME ('DD', dtDate), Integer));

  Var('fMonthPart', Float, 0);

  // ѕрибавл€ем целое кол-во мес€цев без учета годов в общем числе мес€цев
  iMonth := iMonth + MOD(TRUNC(fMonths), 12);
  // ѕрибавл€ем кол-во лет
  iYear := iYear + TRUNC(fMonths) / 12;

  // ѕрибавим год, если есть переход
  IF(iMonth > 12, 
    Block(
      iMonth := iMonth - 12;
      iYear := iYear + 1
  ));

  // ѕровер€ем последние числа мес€ца, если надо - выравниваем
  IF(iDay > DaysInMonth(Trim(iYear), Trim(iMonth)),
    iDay := DaysInMonth(Trim(iYear), Trim(iMonth))
  );

  // ѕрибавл€ем кусок мес€ца, если надо
  IF(CONVERT(TRUNC(fMonths), Float) < fMonths, Block(
    // ƒол€ остатка дней до конца мес€ца в общем числе дней мес€ца
    fMonthPart := 1 - CONVERT(iDay, Float) / CONVERT(DaysInMonts(Trim(iYear), Trim(iMonth)), Float);

    // ≈сли прибавить к дн€м нужно больше, чем осталось до конца мес€ца, прибавим мес€ц
    // прибавл€емую долю уменьшим на остаток дней в предыдущем мес€це
    IF(FRAC(fMonths) > fMonthPart, Block(
      iMonth := iMonth + 1;
      IF(iMonth > 12,
        iYear := iYear + 1
      );
      fMonthPart := FRAC(fMonths) - fMonthPart;
    ),
      fMonthPart := FRAC(fMonths)
    );

    iDay := iDay + TRUNC(fMonthPart * CONVERT(DaysinMonth(Trim(iYear), Trim(iMonth)), Float));
    IF(iDay > DaysinMonth(Trim(iYear), Trim(iMonth)),
      iDay := iDay - DaysinMonth(Trim(iYear), Trim(iMonth))
    );
  ));

  ENCODEDATE(iYear, iMonth, iDay)
));
