// *****************************************************************************
// Название: Загрузка требования о проведении операций
// Описание: Загрузка требования о проведении операций
// Кнопка вызова: 1
// Подпись кнопки: Загрузка требования о проведении операций
// Вызов по событию: 
// *****************************************************************************
//

FUNC('GetDate',
     BLOCK(
       PARAM ('iParrentElement', integer, 0),
       PARAM ('sElementName', string, 1),
     ),
     BLOCK(
       VAR('dDate', datetime);
       //showmessage(iParrentElement);
       dDate:=STRTODATE(XMLNODEVALUE(XMLNODEFIND(iParrentElement,sElementName)),'YYYY-MM-DD', '-');
       dDate;
     );
),


{
  VAR ('sPath', String, '');
  IF (SELECTFILE ('sPath', 'Выбор уведомления о выпуске', 'Xml-файлы (*.xml)|*.xml') = 0, RAISEEXCEPTION ('Отменено пользователем'));

  VAR ('XmlDoc', Integer, XMLDOCUMENTCREATE());
  XMLDOCUMENTLOAD (XmlDoc, sPath);

  VAR ('XmlRoot', Integer, XMLDOCUMENTROOT (XmlDoc));
}

OPENTABLE ('OPERATE', 'JRREQOPER', 'JOURNAL_MASTER_ID', 'dbJournals', 1);


VAR ('XmlReqOper', Integer, XMLNODECHILD (XmlRoot, 0));
VAR ('vPlaceId',  String,  XMLNODEATTRIBUTE (ReqOper, 'whid'));
VAR ('vDO1Id',  String, XMLNODEATTRIBUTE (ReqOper, 'do1id'));
VAR ('sSQL', String, '');

VAR ('strStatus', String, '');
VAR ('DoType', String, '');
VAR ('DoNo', String, '');
VAR ('DoDate', DateTime);
VAR ('dRegDate', DateTime);
VAR ('sSubStatus', String, '');
VAR ('iReaded', Integer, 1);
IF (VAREXISTS ('iRecordType') = 0, VAR ('iRecordType', Integer, 0));

sSQL := 'SELECT ID FROM KRD_MAIN WHERE PLACEID=' + vPlaceID + IF (LENGTH (vDO1ID) > 30, ' AND DOCUMENTID=' +char(39)+ vDO1ID +char(39), ' AND ID=' + vDO1ID);
//showmessage (sSQL);
OPENQUERY ('qFindID', 'STS_DB', sSQL);
VAR ('vID', String, qFindID.ID);

VAR ('sDocumentID', string, XMLNODEVALUE (XMLNODEFIND (XmlReqOper, 'cat_ru:DocumentID')));


IF(LOCATE('OPERATE', 'DocumentID', sDocumentID)=0,
   BLOCK(
   
      OPENQUERY ('qryMAXID', ' SELECT MAX(JOURNAL_MASTER_ID) AS MAX_ID FROM JRREQOPER', 'dbJournals');
      VAR('iJMID', Integer, qryMAXID.MAX_ID + 1);

      VAR('iCustoms', integer, XMLNODEFIND (XmlReqOper, 'reqop:Customs'));
      VAR('iDeclarant', integer, XMLNODEFIND (XmlReqOper, 'reqop:Declarant'));
          VAR('iRFOrganizationFeatures', integer, XMLNODEFIND (iDeclarant, 'cat_ru:RFOrganizationFeatures'));
          VAR('iREPresentative', integer, XMLNODEFIND (iDeclarant, 'reqop:REPresentative'));
              VAR('iREPOrganizationFeatures', integer, XMLNODEFIND (iREPresentative, 'cat_ru:RFOrganizationFeatures'));
      VAR('iTransportation', integer, XMLNODEFIND (XmlReqOper, 'reqop:Transportation'));
      VAR('iWeighing', integer, XMLNODEFIND (XmlReqOper, 'reqop:Weighing'));
      VAR('iDifferentDefinitionQuantity', integer, XMLNODEFIND (XmlReqOper, 'reqop:DifferentDefinitionQuantity'));
      VAR('iLoading', integer, XMLNODEFIND (XmlReqOper, 'reqop:Loading'));
      VAR('iUnloading', integer, XMLNODEFIND (XmlReqOper, 'reqop:Unloading'));
      VAR('iOverload', integer, XMLNODEFIND (XmlReqOper, 'reqop:Overload'));
      VAR('iCorrectionPackaging', integer, XMLNODEFIND (XmlReqOper, 'reqop:CorrectionPackaging'));
      VAR('iUnpacking', integer, XMLNODEFIND (XmlReqOper, 'reqop:Unpacking'));
      VAR('iPacking', integer, XMLNODEFIND (XmlReqOper, 'reqop:Packing'));
      VAR('iREPackaging', integer, XMLNODEFIND (XmlReqOper, 'reqop:REPackaging'));
      VAR('iOpeningLocationGoods', integer, XMLNODEFIND (XmlReqOper, 'reqop:OpeningLocationGoods'));
      VAR('iDivisionConsignment', integer, XMLNODEFIND (XmlReqOper, 'reqop:DivisionConsignment'));
      VAR('iCustomsPerson', integer, XMLNODEFIND (XmlReqOper, 'reqop:CustomsPerson'));
      VAR('iPersonSignature', integer, XMLNODEFIND (XmlReqOper, 'reqop:PersonSignature'));
      VAR('iDirectionRequirement', integer, XMLNODEFIND (XmlReqOper, 'reqop:DirectionRequirement'));
          VAR('iDirectionReqCustomsPerson', integer, XMLNODEFIND (iDirectionRequirement, 'reqop:CustomsPerson'));
          VAR('iDirectionReqPerson', integer, XMLNODEFIND (iDirectionRequirement, 'reqop:Person'));
          VAR('iDirectionReqAddress', integer, XMLNODEFIND (iDirectionRequirement, 'reqop:Address'));
      
      APPENDRECORD ('OPERATE');
      EDIT ('OPERATE');
      SETFIELDVALUE('OPERATE',
                    'JOURNAL_MASTER_ID', iJMID,
                    'JOURNAL_UUID', GENERATEUUID (),
                    'DocumentId',sDocumentID,
                    'Status','',//XMLNODEVALUE(XMLNODEFIND(, '')),
                    'ReqDate',GetDate(XmlReqOper, 'reqop:ReqDate'),
                    'DocSign',IF(UPPERSTR(XMLNODEVALUE(XMLNODEFIND(XmlReqOper, 'reqop:DocSign')))='FALSE','Требование', 'Заявление'),
                    'CustomsCode',XMLNODEVALUE(XMLNODEFIND(iCustoms, 'cat_ru:Code')),
                    'CustomsOfficeName',XMLNODEVALUE(XMLNODEFIND(iCustoms, 'cat_ru:OfficeName')),
                    'CustomsCountryCode',XMLNODEVALUE(XMLNODEFIND(iCustoms, 'cat_ru:CustomsCountryCode')),
                    'DeclOrgName',XMLNODEVALUE(XMLNODEFIND(iDeclarant, 'cat_ru:OrganizationName')),
                    'DeclINN',XMLNODEVALUE(XMLNODEFIND(iRFOrganizationFeatures, 'cat_ru:INN')),
                    'REPrOrgName',XMLNODEVALUE(XMLNODEFIND(iREPresentative, 'cat_ru:OrganizationName')),
                    'REPrINN',XMLNODEVALUE(XMLNODEFIND(iREPOrganizationFeatures, 'cat_ru:INN')),
                    //'DOCUMENTSIGN','',
                    'TranspValue',IF(XMLNODEVALUE(XMLNODEFIND(iTransportation, 'reqop:Value'))='true','1','0'),
                    'TranspRemark',XMLNODEVALUE(XMLNODEFIND(iTransportation, 'reqop:Remark')),
                    //'TRANSPDECISION','',
                    'WEIGHINGVALUE',IF(XMLNODEVALUE(XMLNODEFIND(iWeighing, 'reqop:Value'))='true','1','0'),
                    'WEIGHINGREMARK',XMLNODEVALUE(XMLNODEFIND(iWeighing, 'reqop:Remark')),
                    //'WEIGHINGDECISION','',
                    'DEFQUANTVALUE',IF(XMLNODEVALUE(XMLNODEFIND(iDifferentDefinitionQuantity, 'reqop:Value'))='true','1','0'),
                    'DEFQUANTREMARK',XMLNODEVALUE(XMLNODEFIND(iDifferentDefinitionQuantity, 'reqop:Remark')),
                    //'DEFQUANTDECISION',XMLNODEVALUE(XMLNODEFIND(iDifferentDefinitionQuantity, '')),
                    'LOADINGVALUE',IF(XMLNODEVALUE(XMLNODEFIND(iLoading, 'reqop:Value'))='true','1','0'),
                    'LOADINGREMARK',XMLNODEVALUE(XMLNODEFIND(iLoading, 'reqop:Remark')),
                    //'LOADINGDECISION',XMLNODEVALUE(XMLNODEFIND(iLoading, '')),
                    'UNLOADINGVALUE',IF(XMLNODEVALUE(XMLNODEFIND(iUnloading, 'reqop:Value'))='true','1','0'),
                    'UNLOADINREMARK',XMLNODEVALUE(XMLNODEFIND(iUnloading, 'reqop:Remark')),
                    //'UNLOADINGDECISION',XMLNODEVALUE(XMLNODEFIND(iUnloading, '')),
                    'OVERLOADINGVALUE',IF(XMLNODEVALUE(XMLNODEFIND(iOverload, 'reqop:Value'))='true','1','0'),
                    'OVERLOADINGREMARK',XMLNODEVALUE(XMLNODEFIND(iOverload, 'reqop:Remark')),
                    //'OVERLOADINGDECISION',XMLNODEVALUE(XMLNODEFIND(iOverload, '')),
                    'CORRPACKVALUE',IF(XMLNODEVALUE(XMLNODEFIND(iCorrectionPackaging, 'reqop:Value'))='true','1','0'),
                    'CORRPACKREMARK',XMLNODEVALUE(XMLNODEFIND(iCorrectionPackaging, 'reqop:Remark')),
                    //'CORRPACKDECISION',XMLNODEVALUE(XMLNODEFIND(iCorrectionPackaging, '')),
                    'UNPACKINGVALUE',IF(XMLNODEVALUE(XMLNODEFIND(iUnpacking, 'reqop:Value'))='true','1','0'),
                    'UNPACKINGREMARK',XMLNODEVALUE(XMLNODEFIND(iUnpacking, 'reqop:Remark')),
                    //'UNPACKINGDECISION',XMLNODEVALUE(XMLNODEFIND(iUnpacking, '')),
                    'PACKINGVALUE',IF(XMLNODEVALUE(XMLNODEFIND(iPacking, 'reqop:Value'))='true','1','0'),
                    'PACKINGREMARK',XMLNODEVALUE(XMLNODEFIND(iPacking, 'reqop:Remark')),
                    //'PACKINGDECISION',XMLNODEVALUE(XMLNODEFIND(iPacking, '')),
                    'REPACKINGVALUE',IF(XMLNODEVALUE(XMLNODEFIND(iREPackaging, 'reqop:Value'))='true','1','0'),
                    'REPACKINGREMARK',XMLNODEVALUE(XMLNODEFIND(iREPackaging, 'reqop:Remark')),
                    //'REPACKINGDECISION',XMLNODEVALUE(XMLNODEFIND(iREPackaging, '')),
                    'OLG_VALUE',IF(XMLNODEVALUE(XMLNODEFIND(iOpeningLocationGoods, 'reqop:Value'))='true','1','0'),
                    'OLG_REMARK',XMLNODEVALUE(XMLNODEFIND(iOpeningLocationGoods, 'reqop:Remark')),
                    //'OLG_DECISION',XMLNODEVALUE(XMLNODEFIND(iOpeningLocationGoods, '')),
                    'DIVISIONVALUE',IF(XMLNODEVALUE(XMLNODEFIND(iDivisionConsignment, 'reqop:Value'))='true','1','0'),
                    'DIVISIONREMARK',XMLNODEVALUE(XMLNODEFIND(iDivisionConsignment, 'reqop:Remark')),
                    //'DIVISIONDECISION',XMLNODEVALUE(XMLNODEFIND(iDivisionConsignment, '')),
                    'InspFIO',XMLNODEVALUE(XMLNODEFIND(iCustomsPerson, 'cat_ru:PersonName')),
                    'InspLNP',XMLNODEVALUE(XMLNODEFIND(iCustomsPerson, 'cat_ru:LNP')),
                    'ID', vId
      );
      POST('OPERATE');
     
   )
);


CLOSEDATASET ('OPERATE');


EXECUTESQL ('STS_DB', 'UPDATE KRD_MAIN SET STATUS_EPS=' +char(39)+ 'Получено требование о проведении операций с товарами' +char(39)+ ' WHERE PLACEID=' + vPlaceID + ' AND ID=' + vID);
OPENQUERY ('qGetDONo', 'STS_DB', 'SELECT NBD, BD_DATE FROM KRD_MAIN WHERE PLACEID=' + vPlaceID + ' AND ID=' + vID);

strStatus := 'Получено требование о проведении операций с товарами';
iReaded   := 0;
vPlaceID  := vPlaceID;
DocId     := vDO1Id;
DoType   := 'ДО-1';
DoNo     := qGetDONo.NBD;
DoDate   := qGetDONo.BD_DATE;
dRegDate  := Date () + Time(1);
iRecordType := 0;
