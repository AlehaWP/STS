// *****************************************************************************
// Название: permit_do_change
// Описание: 
// Кнопка вызова: 0
// Подпись кнопки: permit_do_change
// Язык: FuncScript
// Вызов по событию: 
// Без подтверждения: 0
// *****************************************************************************
//

IF (VAREXISTS ('sSQL') = 0, VAR ('sSQL', String, ''));

VAR ('dtDoDt', DateTime, XMLNODEATTRIBUTE (xmlMainNode, 'dodt'));
VAR ('iPlaceId', Integer, XMLNODEATTRIBUTE (xmlMainNode, 'whid'));
VAR ('sDocumentId', String, XMLNODEATTRIBUTE (xmlMainNode, 'do1id'));
VAR ('sInitEnvelopeId', String, XMLNODEATTRIBUTE (xmlMainNode, 'initEnvelopeId'));
VAR ('sCADocumentId', String, '');

VAR ('sStatus', String, '');
VAR ('sSubStatus', String, '');
VAR ('iReaded', Integer, INIFILE ('JR_EPS_LOG', 'PermitDOChange', 1));
VAR ('dtRegistrationDate', DateTime);
VAR ('sDORegisterNumber', String, '');
VAR ('sCustomPerson', String, '');
VAR ('sCustomPersonLNP', String, '');


FUNC ('FillVariables', '',
  Block(
    dtRegistrationDate := STRTODATE (xmlMainNode.DORegisterNumber.RegistrationDate, 'YYYY-MM-DD', '-');
    sDORegisterNumber :=  xmlMainNode.DORegisterNumber.CustomsCode + '/' +
                          FDT ('DDMMYY', dtRegistrationDate) + '/' +
                          xmlMainNode.DORegisterNumber.GTDNumber;
    sCustomPerson :=      xmlMainNode.CustomsPerson.PersonName;
    sCustomPersonLNP :=   xmlMainNode.CustomsPerson.LNP;
  )
);


FUNC ('UpdateStatusEps', '',
  Block(
    sSQL := 'UPDATE' +
            ' KRD_MAIN' +
            ' SET' +
            ' STATUS_EPS=' +char(39)+ sStatus +char(39)+
            ' WHERE' +
            ' PLACEID=' + KRD_MAIN_2.PLACEID +
            ' AND MAIN_ID=' + KRD_MAIN_2.MAIN_ID;
    EXECUTESQL ('STS_DB', sSQL);

    // внешняя функция WriteEpsLog, подключена в скрипте eps.imp
    WriteEpsLog(
        KRD_MAIN_2.PLACEID,
        KRD_MAIN_2.ID,
        0,
        KRD_MAIN_2.DOCUMENTID,
        'ДО-1',
        KRD_MAIN_2.NBD,
        KRD_MAIN_2.BD_DATE,
        sStatus,
        Date()+Time(1),
        GENERATEUUID (),
        sSubStatus,
        sXmlFileName, // внешняя переменная из скрипта eps.imp
        iReaded,
        dtDoDt,
        0
    ); // WriteEpsLog
  )
);


FUNC ('CARegistration', '',
  Block(
    sStatus := 'Комм. акт №' + KRD_DOP_2.DOC_NO + ' зарегистрирован';
    sSQL := 'UPDATE' +
            ' KRD_DOP' +
            ' SET' +
            ' DOC_REG_STATUS=' +char(39)+ '3' +char(39)+
            ', DOC_REG_NO=' +char(39)+ sDORegisterNumber +char(39)+
            ', DOC_REG_DATETIME=' + DBFORMATDATETIME (dtRegistrationDate, GETDATABASETYPE ('STS_DB'), 0, 1) +
            ', DOC_INSPECTOR_FIO=' +char(39)+ sCustomPerson +char(39)+
            ', DOC_INSPECTOR_LNP=' +char(39)+ sCustomPersonLNP +char(39)+
            ' WHERE' +
            ' PLACEID=' + KRD_DOP_2.PLACEID +
            ' AND ID=' + KRD_DOP_2.ID +
            ' AND COUNTER=' + KRD_DOP_2.COUNTER;
    EXECUTESQL ('STS_DB', sSQL);

    // обновляем статус ЭПС
    IF (LOCATE ('KRD_MAIN_2', 'PLACEID;ID', [KRD_DOP_2.PLACEID, KRD_DOP_2.ID]),
      Block(
        UpdateStatusEps ();
      )
    ); // IF
  )
);


// 0 - коммерческий акт
// 1 - письмо об ошибках
CASE (XMLNODEATTRIBUTE (xmlMainNode, 'ml'),
  [
      '0', // комм. акт
      Block(
        FillVariables ();
        // проверяем наличие акта в базе ВЭД-Склад
        IF (LOCATE ('KRD_DOP_2', 'PLACEID;DOCUMENTID', [iPlaceId, sInitEnvelopeId]),
          Block(
            // загружаем регистрационные данные акта
            CARegistration();
          ),
          Block(
            // если акт не найден, то 
            // пытаемся в EPS_LOG найти список его повторных отправок
            VAR ('bCANotFounded', Boolean, 1);
            sSQL := 'SELECT' +
                    ' SUBSTATUS' +
                    ' FROM EPS_LOG' + 
                    ' WHERE' + 
                    ' PLACEID=' + iPlaceId +
                    ' AND DOCUMENTID=' +char(39)+ sDocumentId +char(39)+
                    ' AND SUBSTATUS <> ' +char(39)+ 'DocumentId= ' + sInitEnvelopeId +char(39)+
                    ' AND DOCSTATUS=' +
                    '(SELECT DISTINCT DOCSTATUS' +
                    ' FROM EPS_LOG' +
                    ' WHERE' +
                    ' PLACEID=' + iPlaceId +
                    ' AND DOCUMENTID=' +char(39)+ sDocumentId +char(39)+
                    ' AND SUBSTATUS=' +char(39)+ 'DocumentId= ' + sInitEnvelopeId +char(39)+
                    ')';
            OPENQUERY ('qPrevCA', 'dbJournals', sSQL, 1);
            IF (BOF ('qPrevCA') = 0, FIRST ('qPrevCA'));
            WHILE (EOF ('qPrevCA') = 0,
              Block(                
                IF (REGEXMATCH (qPrevCA.SUBSTATUS, '(\S{8}(-\S{4}){3}-\S{12})', 34, 'sCADocumentId'),
                  Block(
                    // если сейчас в базе есть Комм. акте DocumentId повторной отправки, то
                    // перезаписываем его текущим нужным значением
                    IF (LOCATE ('KRD_DOP_2', 'PLACEID;DOCUMENTID', [iPlaceId, sCADocumentId]),
                      Block(
                          sSQL := 'UPDATE KRD_DOP' +
                                  ' SET' +
                                  ' DOCUMENTID=' +char(39)+ sInitEnvelopeId +char(39)+
                                  ' WHERE' +
                                  ' ID=' + KRD_DOP_2.ID +
                                  ' AND COUNTER=' + KRD_DOP_2.COUNTER;
                          EXECUTESQL ('STS_DB', sSQL);
                          CARegistration();
                          bCANotFounded := 0;
                      )
                    ); // IF
                  ) 
                ); // IF
                NEXT ('qPrevCA');
              )
            ); // WHILE
            IF (bCANotFounded,
              Block(
                // внешняя функция WriteEps, подключена в eps.imp
                WriteLog(
                  'EPSIMP',
                  '(' + sXmlFileName + '): Не найден комм. акт с параметрами PLACEID: ' + iPlaceId + '; DOCUMENTID: ' + sInitEnvelopeId
                )
              )
            ); // IF
          )
        ); // IF
      ),
      '1', // письмо владельца СВХ
      Block(
        FillVariables ();
        // проверяем наличие Письма в базе ВЭД-Склад
        IF (LOCATE ('KRD_LETTER_2', 'PLACEID;DOCUMENTID', [iPlaceId, sInitEnvelopeId]),
          Block(
            IF (KRD_LETTER_2.LETTER_REG_STATUS <> '3',
              Block(
                sStatus := 'Письмо №' + KRD_LETTER_2.LETTER_NO + ' зарегистрировано';
                sSubStatus := '';

                sSQL := 'UPDATE' +
                        ' KRD_LETTER' +
                        ' SET' +
                        ' LETTER_REG_STATUS=' +char(39)+ '3' +char(39)+
                        ', LETTER_REG_NO=' +char(39)+ sDORegisterNumber +char(39)+
                        ', LETTER_REG_DATETIME=' + DBFORMATDATETIME (dtRegistrationDate, GETDATABASETYPE ('STS_DB'), 0, 1) +
                        ', LETTER_INSPECTOR_FIO=' +char(39)+ sCustomPerson +char(39)+
                        ', LETTER_INSPECTOR_LNP=' +char(39)+ sCustomPersonLNP +char(39)+
                        ' WHERE' +
                        ' PLACEID=' + KRD_LETTER_2.PLACEID +
                        ' AND ID=' + KRD_LETTER_2.ID +
                        ' AND COUNTER=' + KRD_LETTER_2.COUNTER;
                EXECUTESQL ('STS_DB', sSQL);

                IF (LOCATE ('KRD_MAIN_2', 'PLACEID;ID', [KRD_LETTER_2.PLACEID, KRD_LETTER_2.ID]),
                  Block(
                    UpdateStatusEps ();
                  )
                ); // IF
              )
            ); // IF
          ),
          Block(
            // внешняя функция WriteEpsLog, подключена в скрипте eps.imp
            WriteLog(
                'EPSIMP',
                '(' + sXmlFileName + '): Не найдено письмо об ошибках с параметрами PLACEID: ' + iPlaceId + '; DOCUMENTID: ' + sInitEnvelopeId
            ); // WriteLog
          )          
        ); // IF
      )
  ],
); // CASE
