// *****************************************************************************
// Название: Заявление на проведение операций (ReqOperations, Экспорт)
// Описание: Заявление на проведение операций в отношении товаров и ТС (ReqOperations, Экспорт)
// Кнопка вызова: 1
// Подпись кнопки: Заявл. на проведение операций
// Язык: FuncScript
// Вызов по событию: 
// Без подтверждения: 0
// *****************************************************************************
//

FUNC ('CreateXML', ,
  Block(
    VAR ('XMLDoc', Integer, XMLDocumentCreate());
    VAR ('XMLDocRoot', Integer, XMLDocumentRoot(XMLDoc));
    VAR ('XMLReqOper', Integer, XMLNodeAddChild(XMLDocRoot, 'reqop:ReqOperations'));

    //АТТРИБУТЫ ДОБАВЛЕНЫ, ЧТОБЫ XML-ФАЙЛ ОТКРЫВАЛСЯ В IE И КПС (НАЧАЛО)
    XmlNodeSetAttribute (XMLReqOper, 'xmlns:cat_ru', 'urn:customs.ru:CommonAggregateTypes:5.10.0');
    XmlNodeSetAttribute (XMLReqOper, 'xmlns:reqop', 'urn:customs.ru:Information:CustomsDocuments:ReqOperations:5.10.0');
    //АТТРИБУТЫ ДОБАВЛЕНЫ, ЧТОБЫ XML-ФАЙЛ ОТКРЫВАЛСЯ В IE И КПС (КОНЕЦ)

    XmlNodeSetAttribute (XMLReqOper, 'DocumentModeID', '1006135E');
    XMLNODESETVALUES (XMLReqOper, '',
            'cat_ru:DocumentID', vDocID,
            'reqop:ReqNumber', JR_OPERATIONS.REQNUMBER,
            'reqop:ReqDate', FDT ('YYYY-MM-DD', JR_OPERATIONS.ReqDate),
            'reqop:DocSign', 1,
    ); // XMLNODESETVALUES - //

  )
), // FUNC - CreateXML() //

FUNC ('FillXML', ,
  Block(
    //Данные о таможенном органе
    VAR ('XMLCustoms', Integer, XMLNodeAddChild(XMLReqOper, 'reqop:Customs'));
    XmlNodeSetValues (XMLCustoms, '',
              'cat_ru:Code', JR_OPERATIONS.CustomsCode,
              'cat_ru:OfficeName', JR_OPERATIONS.CustomsOfficeName,
              'cat_ru:CustomsCountryCode', JR_OPERATIONS.CustomsCountryCode,
    );

    //Данные о декларанте
    VAR ('XMLDeclarant', Integer, XMLNodeAddChild(XMLReqOper, 'reqop:Declarant'));

    If((FIELDISNULL ('JR_OPERATIONS','DeclOrgName')=0)*(TRIM(JR_OPERATIONS.DeclOrgName) <> ''),
      XmlNodeSetValues (XMLDeclarant, '',
              'cat_ru:OrganizationName', REMOVECHAR (JR_OPERATIONS.DeclOrgName, char(39))
      )
    );
    If((FIELDISNULL ('JR_OPERATIONS','DeclINN')=0)*(TRIM(JR_OPERATIONS.DeclINN) <> ''),
      XmlNodeSetValues (XMLDeclarant, '',
              'cat_ru:RFOrganizationFeatures\cat_ru:INN', JR_OPERATIONS.DeclINN
      )
    );
    // сведения о представителе
    If((FIELDISNULL ('JR_OPERATIONS','ReprOrgName')=0)*(TRIM(JR_OPERATIONS.ReprOrgName) <> ''),
      XmlNodeSetValues (XMLDeclarant, '',
              'reqop:Representative\cat_ru:OrganizationName', REMOVECHAR (JR_OPERATIONS.ReprOrgName, char(39))
      )
    );
    If((FIELDISNULL ('JR_OPERATIONS','ReprINN')=0)*(TRIM(JR_OPERATIONS.ReprINN) <> ''),
      XmlNodeSetValues (XMLDeclarant, '',
              'reqop:Representative\cat_ru:RFOrganizationFeatures\cat_ru:INN', JR_OPERATIONS.ReprINN
      )
    );

    // оп. Транспортировка
    VAR ('XMLOper1', Integer, XMLNodeAddChild(XMLReqOper, 'reqop:Transportation'));
    XmlNodeSetValues (XMLOper1, '',
              'reqop:Value', IF(JR_OPERATIONS.TranspValue=0, 'false', 'true')
    );
    If((FIELDISNULL ('JR_OPERATIONS','TranspRemark')=0)*(TRIM(JR_OPERATIONS.TranspRemark) <> ''),
      XmlNodeSetValues (XMLOper1, '',
              'reqop:Remark', JR_OPERATIONS.TranspRemark
      )
    );

    // оп. Взвешивание
    VAR ('XMLOper2', Integer, XMLNodeAddChild(XMLReqOper, 'reqop:Weighing'));
    XmlNodeSetValues (XMLOper2, '',
              'reqop:Value', If(JR_OPERATIONS.WEIGHINGVALUE=0, 'false', 'true')
    );
    If((FIELDISNULL ('JR_OPERATIONS','WEIGHINGREMARK')=0)*(TRIM(JR_OPERATIONS.WEIGHINGREMARK) <> ''),
      XmlNodeSetValues (XMLOper2, '',
              'reqop:Remark', JR_OPERATIONS.WEIGHINGREMARK
      )
    );
    // оп. Иное определение количества
    VAR ('XMLOper3', Integer, XMLNodeAddChild(XMLReqOper, 'reqop:DifferentDefinitionQuantity'));
    XmlNodeSetValues (XMLOper3, '',
              'reqop:Value', If(JR_OPERATIONS.DEFQUANTVALUE=0, 'false', 'true')
    );
    If((FIELDISNULL ('JR_OPERATIONS','DEFQUANTREMARK')=0)*(TRIM(JR_OPERATIONS.DEFQUANTREMARK) <> ''),
      XmlNodeSetValues (XMLOper3, '',
              'reqop:Remark', JR_OPERATIONS.DEFQUANTREMARK
      )
    );
    // оп. Погрузка
    VAR ('XMLOper4', Integer, XMLNodeAddChild(XMLReqOper, 'reqop:Loading'));
    XmlNodeSetValues (XMLOper4, '',
              'reqop:Value', If(JR_OPERATIONS.LOADINGVALUE=0, 'false', 'true')
    );
    If((FIELDISNULL ('JR_OPERATIONS','LOADINGREMARK')=0)*(TRIM(JR_OPERATIONS.LOADINGREMARK) <> ''),
      XmlNodeSetValues (XMLOper4, '',
              'reqop:Remark', JR_OPERATIONS.LOADINGREMARK
      )
    );
    // оп. Выгрузка
    VAR ('XMLOper5', Integer, XMLNodeAddChild(XMLReqOper, 'reqop:UNLoading'));
    XmlNodeSetValues (XMLOper5, '',
              'reqop:Value', If(JR_OPERATIONS.UNLOADINGVALUE=0, 'false', 'true')
    );
    If((FIELDISNULL ('JR_OPERATIONS','UNLOADINGREMARK')=0)*(TRIM(JR_OPERATIONS.UNLOADINGREMARK) <> ''),
      XmlNodeSetValues (XMLOper5, '',
              'reqop:Remark', JR_OPERATIONS.UNLOADINGREMARK
      )
    );
    // оп. перегрузка
    VAR ('XMLOper6', Integer, XMLNodeAddChild(XMLReqOper, 'reqop:Overload'));
    XmlNodeSetValues (XMLOper6, '',
              'reqop:Value', If(JR_OPERATIONS.OVERLOADINGVALUE=0, 'false', 'true')
    );
    If((FIELDISNULL ('JR_OPERATIONS','OVERLOADINGREMARK')=0)*(TRIM(JR_OPERATIONS.OverLOADINGREMARK) <> ''),
      XmlNodeSetValues (XMLOper6, '',
              'reqop:Remark', JR_OPERATIONS.OverLOADINGREMARK
      )
    );
    // оп. исправление повр. упаковки
    VAR ('XMLOper7', Integer, XMLNodeAddChild(XMLReqOper, 'reqop:CorrectionPackaging'));
    XmlNodeSetValues (XMLOper7, '',
              'reqop:Value', If(JR_OPERATIONS.CorrPackValue=0, 'false', 'true')
    );
    If((FIELDISNULL ('JR_OPERATIONS','CorrPackRemark')=0)*(TRIM(JR_OPERATIONS.CorrPackRemark) <> ''),
      XmlNodeSetValues (XMLOper7, '',
              'reqop:Remark', JR_OPERATIONS.CorrPackRemark
      )
    );
    // оп. вскрытие упаковки
    VAR ('XMLOper8', Integer, XMLNodeAddChild(XMLReqOper, 'reqop:Unpacking'));
    XmlNodeSetValues (XMLOper8, '',
              'reqop:Value', If(JR_OPERATIONS.UNPACKINGVALUE=0, 'false', 'true')
    );
    If((FIELDISNULL ('JR_OPERATIONS','UNPACKINGREMARK')=0)*(TRIM(JR_OPERATIONS.UNPACKINGREMARK) <> ''),
      XmlNodeSetValues (XMLOper8, '',
              'reqop:Remark', JR_OPERATIONS.UNPACKINGREMARK
      )
    );
    // оп. упаковка
    VAR ('XMLOper9', Integer, XMLNodeAddChild(XMLReqOper, 'reqop:Packing'));
    XmlNodeSetValues (XMLOper9, '',
              'reqop:Value', If(JR_OPERATIONS.PACKINGVALUE=0, 'false', 'true')
    );
    If((FIELDISNULL ('JR_OPERATIONS','PACKINGREMARK')=0)*(TRIM(JR_OPERATIONS.PACKINGREMARK) <> ''),
      XmlNodeSetValues (XMLOper9, '',
              'reqop:Remark', JR_OPERATIONS.PACKINGREMARK
      )
    );
    // оп. пееупаковка
    VAR ('XMLOper10', Integer, XMLNodeAddChild(XMLReqOper, 'reqop:Repackaging'));
    XmlNodeSetValues (XMLOper10, '',
              'reqop:Value', If(JR_OPERATIONS.REPACKINGVALUE=0, 'false', 'true')
    );
    If((FIELDISNULL ('JR_OPERATIONS','REPACKINGREMARK')=0)*(TRIM(JR_OPERATIONS.REPACKINGREMARK) <> ''),
      XmlNodeSetValues (XMLOper10, '',
              'reqop:Remark', JR_OPERATIONS.REPACKINGREMARK
      )
    );
    // оп. вскрытие помещений, и других мест где находятся товары
    VAR ('XMLOper11', Integer, XMLNodeAddChild(XMLReqOper, 'reqop:OpeningLocationGoods'));
    XmlNodeSetValues (XMLOper11, '',
              'reqop:Value', If(JR_OPERATIONS.OLG_VALUE=0, 'false', 'true')
    );
    If((FIELDISNULL ('JR_OPERATIONS','OLG_REMARK')=0)*(TRIM(JR_OPERATIONS.OLG_REMARK) <> ''),
      XmlNodeSetValues (XMLOper11, '',
              'reqop:Remark', JR_OPERATIONS.OLG_REMARK
      )
    );
    // оп. разделения товарной партии
    VAR ('XMLOper12', Integer, XMLNodeAddChild(XMLReqOper, 'reqop:DivisionConsignment'));
    XmlNodeSetValues (XMLOper12, '',
              'reqop:Value', If(JR_OPERATIONS.DIVISIONVALUE=0, 'false', 'true')
    );
    If((FIELDISNULL ('JR_OPERATIONS','DIVISIONREMARK')=0)*(TRIM(JR_OPERATIONS.DIVISIONREMARK) <> ''),
      XmlNodeSetValues (XMLOper12, '',
              'reqop:Remark', JR_OPERATIONS.DIVISIONREMARK
      )
    );


    //Данные о должностном лице таможенного органа
    VAR ('XMLCustomsPerson', Integer, XMLNodeAddChild(XMLReqOper, 'reqop:CustomsPerson'));
    XmlNodeSetValues (XMLCustomsperson, '',
              'cat_ru:PersonName', JR_OPERATIONS.InspFIO,
              'cat_ru:LNP', JR_OPERATIONS.InspLNP
    );
  )
),  // FUNC - FillXML //


FUNC ('SaveXML', ,
  Block(
    VAR ('sTempDir', String, INCLUDETRAILINGBACKSLASH (TEMPDIRECTORY ()) + 'STS-MED\');
    IF (DIRECTORYEXISTS (sTempDir) = 0, FORCEDIRECTORIES (sTempDir));

    VAR ('sTmpFileName', String, INCLUDETRAILINGBACKSLASH (sTempDir) + 'ReqWHOperations_'+vPlaceID+'_'+vDocID+'.xml');
    XMLDocumentSaveToFile(XMLDoc, sTmpFileName);
    sTmpFileName
  )
), // FUNC - SaveTmpXML() //

FUNC ('GetReqOperationsExpXml',
  Block (
    Param ('pPlaceID', string, 0);
    Param ('pDocID', string, 1);
  ),
  Block (
    vPlaceID := pPlaceID;
    vDocID := pDocID;

    CreateXML ();
    FillXML ();
    SaveXML ()
  )
),

VAR ('vPlaceID', string, '');
VAR ('vDocID', string, '');





